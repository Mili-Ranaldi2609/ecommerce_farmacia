generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int     @id @default(autoincrement())
  email      String  @unique
  password   String
  googleBool Boolean @default(false)
  client     Client?
}

model Client {
  id              Int      @id @default(autoincrement())
  nombre          String
  apellido        String
  direccion       String
  available       Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  fechaNacimiento String?
  sexo            String?
  telefono        String?
  urlImagen       String?
  userType        UserType @default(PACIENTE)
  rol             Rol      @default(CLIENT)
  userId          Int      @unique
  user            User     @relation(fields: [userId], references: [id])

  @@index([available])
}

model Pedido {
  id              Int                @id @default(autoincrement())
  fechaPedido     DateTime?          @default(now())
  usuarioId       Int
  totalItems      Int
  totalAmount     Float
  estado          Estados            @default(EN_CARRITO)
  createdAt       DateTime           @default(now())
  UpdatedAt       DateTime           @updatedAt
  available       Boolean            @default(true)
  detallesPedidos DetallePedido[]
  estadoPedido    HistorialEstados[]
  pago            Pago?
}

model HistorialEstados {
  id                Int      @id @default(autoincrement())
  estado            Estados
  pedidoId          Int
  fechaModificacion DateTime @default(now())
  available         Boolean  @default(true)
  pedido            Pedido   @relation(fields: [pedidoId], references: [id])
}

model DetallePedido {
  id         Int      @id @default(autoincrement())
  cantidad   Int
  precio     Float
  productoId Int
  pedidoId   Int?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  available  Boolean  @default(true)
  pedido     Pedido?  @relation(fields: [pedidoId], references: [id])
}

model Pago {
  id         Int                    @id @default(autoincrement())
  monto      Float
  fechaPago  DateTime?
  metodoPago String
  estado     EstadoPagos            @default(EN_PROCESO)
  usuario    Int
  pedidoId   Int                    @unique
  createdAt  DateTime               @default(now())
  updatedAt  DateTime               @updatedAt
  available  Boolean                @default(true)
  historial  HistorialEstadosPago[]
  pedido     Pedido                 @relation(fields: [pedidoId], references: [id])
}

model HistorialEstadosPago {
  id                Int         @id @default(autoincrement())
  estado            EstadoPagos
  pagoId            Int
  fechaModificacion DateTime    @default(now())
  available         Boolean     @default(true)
  pago              Pago        @relation(fields: [pagoId], references: [id])
}

model Product {
  id             Int                    @id @default(autoincrement())
  nombre         String
  precio         Float
  marca          String                 @default("Sin marca")
  stock          Int
  available      Boolean                @default(true)
  createdAt      DateTime               @default(now())
  updatedAt      DateTime               @updatedAt
  tipoProductoId Int?
  descripcionId  Int                    @unique
  tiposUsoId     Int                    @unique
  proveedorId    Int?
  comentario     Comentario[]
  descuento      DescuentoProducto[]
  favorito       Favorito[]
  imagen         Imagen[]
  presupuesto    Presupuesto?
  descripcion    Descripcion            @relation(fields: [descripcionId], references: [id])
  proveedor      Proveedores?           @relation(fields: [proveedorId], references: [id])
  tipoProducto   TipoProducto?          @relation(fields: [tipoProductoId], references: [id])
  tiposDeUso     TipoUso                @relation(fields: [tiposUsoId], references: [id], onDelete: Cascade)
  categorias     ProductoCategoria[]
  receta         Receta[]
  solicitudes    SolicitudPresupuesto[]

  @@index([available])
}

model Categoria {
  id              Int                 @id @default(autoincrement())
  nombreCategoria String
  available       Boolean             @default(true)
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  productos       ProductoCategoria[]
  tipoProductos   TipoProducto[]
}

model ProductoCategoria {
  productId   Int
  categoriaId Int
  categoria   Categoria @relation(fields: [categoriaId], references: [id])
  producto    Product   @relation(fields: [productId], references: [id])

  @@id([productId, categoriaId])
}

model TipoProducto {
  id                Int            @id @default(autoincrement())
  nombreTipo        String
  available         Boolean        @default(true)
  categoriaId       Int            @default(1)
  tipoPadreId       Int?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  productos         Product[]
  categoria         Categoria      @relation(fields: [categoriaId], references: [id])
  tipoPadre         TipoProducto?  @relation("TiposProductoAutoRelation", fields: [tipoPadreId], references: [id])
  tiposRelacionados TipoProducto[] @relation("TiposProductoAutoRelation")
}

model DescuentoProducto {
  id              Int      @id @default(autoincrement())
  available       Boolean  @default(true)
  precioDescuento Float
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  productoId      Int
  producto        Product  @relation(fields: [productoId], references: [id])
}

model Favorito {
  id        Int      @id @default(autoincrement())
  available Boolean  @default(true)
  fecha     DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
  productId Int
  product   Product  @relation(fields: [productId], references: [id])

  @@unique([userId, productId])
}

model Descripcion {
  id              Int      @id @default(autoincrement())
  available       Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  descripcion     String
  caracteristicas String[]
  product         Product?
}

model Comentario {
  id               Int      @id @default(autoincrement())
  available        Boolean  @default(true)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  comentario       String   @db.VarChar(256)
  tituloComentario String   @db.VarChar(20)
  rating           Int
  userId           Int
  productId        Int
  product          Product  @relation(fields: [productId], references: [id])

  @@unique([userId, productId])
}

model TipoUso {
  id          Int      @id @default(autoincrement())
  available   Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  descripcion String
  tiposDeUso  String[]
  product     Product?
}

model Imagen {
  id          Int     @id @default(autoincrement())
  available   Boolean @default(true)
  tipoImagen  String
  descripcion String
  urlImagen   String
  productoId  Int
  producto    Product @relation(fields: [productoId], references: [id])
}

model Proveedores {
  id          Int          @id @default(autoincrement())
  available   Boolean      @default(true)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  nombre      String
  email       String       @unique
  telefono    String       @unique
  presupuesto Presupuesto?
  product     Product[]
}

model Receta {
  id          Int      @id @default(autoincrement())
  available   Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  descripcion String
  userId      Int
  productoId  Int
  imagen      String
  producto    Product  @relation(fields: [productoId], references: [id])
}

model Presupuesto {
  id                     Int                          @id @default(autoincrement())
  available              Boolean                      @default(true)
  createdAt              DateTime                     @default(now())
  updatedAt              DateTime                     @updatedAt
  descripcion            String
  monto                  Float
  cantidad               Int
  estado                 EstadoPresupuesto            @default(CREADO)
  descargaPresupuestoId  Int?                         @unique
  proveedorId            Int                          @unique
  productoId             Int                          @unique
  solicitudPresupuestoId Int                          @unique
  historialPresupuesto   HistorialEstadoPresupuesto[]
  descargaPresupuesto    descargaPresupuesto?         @relation(fields: [descargaPresupuestoId], references: [id])
  producto               Product                      @relation(fields: [productoId], references: [id])
  proveedor              Proveedores                  @relation(fields: [proveedorId], references: [id])
  solicitudPresupuesto   SolicitudPresupuesto         @relation(fields: [solicitudPresupuestoId], references: [id])
}

model HistorialEstadoPresupuesto {
  id                Int               @id @default(autoincrement())
  estado            EstadoPresupuesto
  presupuestoId     Int
  fechaModificacion DateTime          @default(now())
  available         Boolean
  presupuesto       Presupuesto       @relation(fields: [presupuestoId], references: [id])
}

model descargaPresupuesto {
  id            Int          @id @default(autoincrement())
  available     Boolean      @default(true)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  fechaDescarga DateTime
  idPago        Int
  presupuesto   Presupuesto?
}

model SolicitudPresupuesto {
  id              Int                        @id @default(autoincrement())
  available       Boolean                    @default(true)
  createdAt       DateTime                   @default(now())
  updatedAt       DateTime                   @updatedAt
  descripcion     String
  cantidad        Int
  productId       Int
  estado          EstadoSolicitud            @default(CREADA)
  userId          Int
  estadoSolicitud HistorialEstadoSolicitud[]
  presupuestos    Presupuesto?
  producto        Product                    @relation(fields: [productId], references: [id])
}

model HistorialEstadoSolicitud {
  id                     Int                  @id @default(autoincrement())
  estado                 EstadoSolicitud
  solicitudPresupuestoId Int
  fechaModificacion      DateTime             @default(now())
  available              Boolean
  solicitud              SolicitudPresupuesto @relation(fields: [solicitudPresupuestoId], references: [id])
}

enum Rol {
  ADMIN
  CLIENT
}

enum UserType {
  PROVEEDOR
  PACIENTE
}

enum Estados {
  EN_CARRITO
  EN_PROCESO
  EN_ESPERA_PAGO
  COMPRADO
  CANCELADO
  PAGO_RECHAZADO
}

enum EstadoPagos {
  EN_PROCESO
  PAGO_CANCELADO
  PAGO_RECHAZADO
  PAGADO
}

enum EstadoPresupuesto {
  CREADO
  ACEPTADO
  CANCELADO
  RECHAZADO
  FINALIZADO
}

enum EstadoSolicitud {
  CREADA
  ACEPTADA
  CANCELADA
  RECHAZADA
  FINALIZADA
}
